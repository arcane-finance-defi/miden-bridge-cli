// This file is @generated by prost-build.
/// Represents the status of the store.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreStatus {
    /// The store's running version.
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    /// The store's status.
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    /// Number of the latest block in the chain.
    #[prost(fixed32, tag = "3")]
    pub chain_tip: u32,
}
/// Returns the latest state proofs of the specified accounts.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountProofsRequest {
    /// A list of account requests, including map keys + values.
    #[prost(message, repeated, tag = "1")]
    pub account_requests: ::prost::alloc::vec::Vec<
        account_proofs_request::AccountRequest,
    >,
    /// Optional flag to include account headers and account code in the response. If false, storage
    /// requests are also ignored. False by default.
    #[prost(bool, optional, tag = "2")]
    pub include_headers: ::core::option::Option<bool>,
    /// Account code commitments corresponding to the last-known `AccountCode` for requested
    /// accounts. Responses will include only the ones that are not known to the caller.
    /// These are not associated with a specific account but rather, they will be matched against
    /// all requested accounts.
    #[prost(message, repeated, tag = "3")]
    pub code_commitments: ::prost::alloc::vec::Vec<super::primitives::Digest>,
}
/// Nested message and enum types in `AccountProofsRequest`.
pub mod account_proofs_request {
    /// Represents per-account requests where each account ID has its own list of
    /// (storage_slot_index, map_keys) pairs.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountRequest {
        /// The account ID for this request.
        #[prost(message, optional, tag = "1")]
        pub account_id: ::core::option::Option<super::super::account::AccountId>,
        /// List of storage requests for this account.
        #[prost(message, repeated, tag = "2")]
        pub storage_requests: ::prost::alloc::vec::Vec<account_request::StorageRequest>,
    }
    /// Nested message and enum types in `AccountRequest`.
    pub mod account_request {
        /// Represents a storage slot index and the associated map keys.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct StorageRequest {
            /// Storage slot index (\[0..255\])
            #[prost(uint32, tag = "1")]
            pub storage_slot_index: u32,
            /// A list of map keys (Digests) associated with this storage slot.
            #[prost(message, repeated, tag = "2")]
            pub map_keys: ::prost::alloc::vec::Vec<
                super::super::super::primitives::Digest,
            >,
        }
    }
}
/// Represents the result of getting account proofs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountProofs {
    /// Block number at which the state of the accounts is returned.
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// List of account state infos for the requested account keys.
    #[prost(message, repeated, tag = "2")]
    pub account_proofs: ::prost::alloc::vec::Vec<account_proofs::AccountProof>,
}
/// Nested message and enum types in `AccountProofs`.
pub mod account_proofs {
    /// A single account proof returned as a response to `GetAccountProofs`.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AccountProof {
        /// The account witness for the current state commitment of one account ID.
        #[prost(message, optional, tag = "1")]
        pub witness: ::core::option::Option<super::super::account::AccountWitness>,
        /// State header for public accounts. Filled only if `include_headers` flag is set to `true`.
        #[prost(message, optional, tag = "2")]
        pub state_header: ::core::option::Option<account_proof::AccountStateHeader>,
    }
    /// Nested message and enum types in `AccountProof`.
    pub mod account_proof {
        /// State header for public accounts.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct AccountStateHeader {
            /// Account header.
            #[prost(message, optional, tag = "1")]
            pub header: ::core::option::Option<
                super::super::super::account::AccountHeader,
            >,
            /// Values of all account storage slots (max 255).
            #[prost(bytes = "vec", tag = "2")]
            pub storage_header: ::prost::alloc::vec::Vec<u8>,
            /// Account code, returned only when none of the request's code commitments match
            /// the current one.
            #[prost(bytes = "vec", optional, tag = "3")]
            pub account_code: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
            /// Storage slots information for this account
            #[prost(message, repeated, tag = "4")]
            pub storage_maps: ::prost::alloc::vec::Vec<
                account_state_header::StorageSlotMapProof,
            >,
        }
        /// Nested message and enum types in `AccountStateHeader`.
        pub mod account_state_header {
            /// Represents a single storage slot with the requested keys and their respective values.
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct StorageSlotMapProof {
                /// The storage slot index (\[0..255\]).
                #[prost(uint32, tag = "1")]
                pub storage_slot: u32,
                /// Merkle proof of the map value
                #[prost(bytes = "vec", tag = "2")]
                pub smt_proof: ::prost::alloc::vec::Vec<u8>,
            }
        }
    }
}
/// Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckNullifiersByPrefixRequest {
    /// Number of bits used for nullifier prefix. Currently the only supported value is 16.
    #[prost(uint32, tag = "1")]
    pub prefix_len: u32,
    /// List of nullifiers to check. Each nullifier is specified by its prefix with length equal
    /// to `prefix_len`.
    #[prost(uint32, repeated, tag = "2")]
    pub nullifiers: ::prost::alloc::vec::Vec<u32>,
    /// Block number from which the nullifiers are requested (inclusive).
    #[prost(fixed32, tag = "3")]
    pub block_num: u32,
}
/// Represents the result of checking nullifiers by prefix.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckNullifiersByPrefixResponse {
    /// List of nullifiers matching the prefixes specified in the request.
    #[prost(message, repeated, tag = "1")]
    pub nullifiers: ::prost::alloc::vec::Vec<
        check_nullifiers_by_prefix_response::NullifierUpdate,
    >,
}
/// Nested message and enum types in `CheckNullifiersByPrefixResponse`.
pub mod check_nullifiers_by_prefix_response {
    /// Represents a single nullifier update.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct NullifierUpdate {
        /// Nullifier ID.
        #[prost(message, optional, tag = "1")]
        pub nullifier: ::core::option::Option<super::super::primitives::Digest>,
        /// Block number.
        #[prost(fixed32, tag = "2")]
        pub block_num: u32,
    }
}
/// List of nullifiers to return proofs for.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NullifierList {
    /// List of nullifiers to return proofs for.
    #[prost(message, repeated, tag = "1")]
    pub nullifiers: ::prost::alloc::vec::Vec<super::primitives::Digest>,
}
/// Represents the result of checking nullifiers.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckNullifiersResponse {
    /// Each requested nullifier has its corresponding nullifier proof at the same position.
    #[prost(message, repeated, tag = "1")]
    pub proofs: ::prost::alloc::vec::Vec<super::primitives::SmtOpening>,
}
/// State synchronization request.
///
/// Specifies state updates the client is interested in. The server will return the first block which
/// contains a note matching `note_tags` or the chain tip. And the corresponding updates to
/// `account_ids` for that block range.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncStateRequest {
    /// Last block known by the client. The response will contain data starting from the next block,
    /// until the first block which contains a note of matching the requested tag, or the chain tip
    /// if there are no notes.
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// Accounts' commitment to include in the response.
    ///
    /// An account commitment will be included if-and-only-if it is the latest update. Meaning it is
    /// possible there was an update to the account for the given range, but if it is not the latest,
    /// it won't be included in the response.
    #[prost(message, repeated, tag = "2")]
    pub account_ids: ::prost::alloc::vec::Vec<super::account::AccountId>,
    /// Specifies the tags which the client is interested in.
    #[prost(fixed32, repeated, tag = "3")]
    pub note_tags: ::prost::alloc::vec::Vec<u32>,
}
/// Represents the result of syncing state request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncStateResponse {
    /// Number of the latest block in the chain.
    #[prost(fixed32, tag = "1")]
    pub chain_tip: u32,
    /// Block header of the block with the first note matching the specified criteria.
    #[prost(message, optional, tag = "2")]
    pub block_header: ::core::option::Option<super::blockchain::BlockHeader>,
    /// Data needed to update the partial MMR from `request.block_num + 1` to `response.block_header.block_num`.
    #[prost(message, optional, tag = "3")]
    pub mmr_delta: ::core::option::Option<super::primitives::MmrDelta>,
    /// List of account commitments updated after `request.block_num + 1` but not after `response.block_header.block_num`.
    #[prost(message, repeated, tag = "5")]
    pub accounts: ::prost::alloc::vec::Vec<super::account::AccountSummary>,
    /// List of transactions executed against requested accounts between `request.block_num + 1` and
    /// `response.block_header.block_num`.
    #[prost(message, repeated, tag = "6")]
    pub transactions: ::prost::alloc::vec::Vec<super::transaction::TransactionSummary>,
    /// List of all notes together with the Merkle paths from `response.block_header.note_root`.
    #[prost(message, repeated, tag = "7")]
    pub notes: ::prost::alloc::vec::Vec<super::note::NoteSyncRecord>,
}
/// Account vault synchronization request.
///
/// Allows clients to sync asset values for specific public accounts within a block range.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncAccountVaultRequest {
    /// Block number from which to start synchronizing.
    #[prost(fixed32, tag = "1")]
    pub block_from: u32,
    /// / Block number up to which to sync. If not specified, syncs up to the latest block.
    /// /
    /// / If specified, this block must be close to the chain tip (i.e., within 30 blocks),
    /// / otherwise an error will be returned.
    #[prost(fixed32, optional, tag = "2")]
    pub block_to: ::core::option::Option<u32>,
    /// Account for which we want to sync asset vault.
    #[prost(message, optional, tag = "3")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncAccountVaultResponse {
    /// The block number of the last update included in this response.
    ///
    /// For chunked responses, this may be less than request.block_to.
    /// If it is less than request.block_to, the user is expected to make a subsequent request
    /// starting from the next block to this one (ie, request.block_from = block_num + 1).
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// Chain tip at the moment of the request.
    #[prost(fixed32, tag = "2")]
    pub chain_tip: u32,
    /// List of asset updates for the account.
    ///
    /// Multiple updates can be returned for a single asset, and the one with a higher `block_num`
    /// is expected to be retained by the caller.
    #[prost(message, repeated, tag = "3")]
    pub updates: ::prost::alloc::vec::Vec<AccountVaultUpdate>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AccountVaultUpdate {
    /// Vault key associated with the asset.
    #[prost(message, optional, tag = "1")]
    pub vault_key: ::core::option::Option<super::primitives::Digest>,
    /// Asset value related to the vault key.
    /// If not present, the asset was removed from the vault.
    #[prost(message, optional, tag = "2")]
    pub asset: ::core::option::Option<super::primitives::Asset>,
    /// Block number at which the above asset was updated in the account vault.
    #[prost(fixed32, tag = "3")]
    pub block_num: u32,
}
/// Note synchronization request.
///
/// Specifies note tags that client is interested in. The server will return the first block which
/// contains a note matching `note_tags` or the chain tip.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncNotesRequest {
    /// Last block known by the client. The response will contain data starting from the next block,
    /// until the first block which contains a note of matching the requested tag.
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// Specifies the tags which the client is interested in.
    #[prost(fixed32, repeated, tag = "2")]
    pub note_tags: ::prost::alloc::vec::Vec<u32>,
}
/// Represents the result of syncing notes request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncNotesResponse {
    /// Number of the latest block in the chain.
    #[prost(fixed32, tag = "1")]
    pub chain_tip: u32,
    /// Block header of the block with the first note matching the specified criteria.
    #[prost(message, optional, tag = "2")]
    pub block_header: ::core::option::Option<super::blockchain::BlockHeader>,
    /// Merkle path to verify the block's inclusion in the MMR at the returned `chain_tip`.
    ///
    /// An MMR proof can be constructed for the leaf of index `block_header.block_num` of
    /// an MMR of forest `chain_tip` with this path.
    #[prost(message, optional, tag = "3")]
    pub mmr_path: ::core::option::Option<super::primitives::MerklePath>,
    /// List of all notes together with the Merkle paths from `response.block_header.note_root`.
    #[prost(message, repeated, tag = "4")]
    pub notes: ::prost::alloc::vec::Vec<super::note::NoteSyncRecord>,
}
/// Storage map synchronization request.
///
/// Allows clients to sync storage map values for specific public accounts within a block range,
/// with support for cursor-based pagination to handle large storage maps.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncStorageMapsRequest {
    /// Block number to start sending updates from (inclusive).
    #[prost(fixed32, tag = "1")]
    pub block_from: u32,
    /// Block number up to which to sync. If not specified, syncs up to the latest block.
    ///
    /// If specified, this block must be close to the chain tip (i.e., within 30 blocks),
    /// otherwise an error will be returned.
    #[prost(fixed32, optional, tag = "2")]
    pub block_to: ::core::option::Option<u32>,
    /// Account for which we want to sync storage maps.
    #[prost(message, optional, tag = "3")]
    pub account_id: ::core::option::Option<super::account::AccountId>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncStorageMapsResponse {
    /// The block number of the last update included in this response.
    ///
    /// For chunked responses, this may be less than request.block_to.
    /// If it is less than request.block_to, the user is expected to make a subsequent request
    /// starting from the next block to this one (ie, request.block_from = block_num + 1).
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// Current chain tip
    #[prost(fixed32, tag = "2")]
    pub chain_tip: u32,
    /// The list of storage map updates.
    ///
    /// Multiple updates can be returned for a single slot index and key combination, and the one
    /// with a higher `block_num` is expected to be retained by the caller.
    #[prost(message, repeated, tag = "3")]
    pub updates: ::prost::alloc::vec::Vec<StorageMapUpdate>,
}
/// Represents a single storage map update.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StorageMapUpdate {
    /// Block number in which the slot was updated.
    #[prost(fixed32, tag = "1")]
    pub block_num: u32,
    /// Slot index (\[0..255\]).
    #[prost(uint32, tag = "2")]
    pub slot_index: u32,
    /// The storage map key.
    #[prost(message, optional, tag = "3")]
    pub key: ::core::option::Option<super::primitives::Digest>,
    /// The storage map value.
    #[prost(message, optional, tag = "4")]
    pub value: ::core::option::Option<super::primitives::Digest>,
}
/// Generated client implementations.
pub mod rpc_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Store API for the RPC component
    #[derive(Debug, Clone)]
    pub struct RpcClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> RpcClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + core::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + core::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RpcClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + core::marker::Send + core::marker::Sync,
        {
            RpcClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns the status info.
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> core::result::Result<tonic::Response<super::StoreStatus>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc_store.Rpc/Status");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc_store.Rpc", "Status"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns a nullifier proof for each of the requested nullifiers.
        pub async fn check_nullifiers(
            &mut self,
            request: impl tonic::IntoRequest<super::NullifierList>,
        ) -> core::result::Result<
            tonic::Response<super::CheckNullifiersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/CheckNullifiers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "CheckNullifiers"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
        ///
        /// Note that only 16-bit prefixes are supported at this time.
        pub async fn check_nullifiers_by_prefix(
            &mut self,
            request: impl tonic::IntoRequest<super::CheckNullifiersByPrefixRequest>,
        ) -> core::result::Result<
            tonic::Response<super::CheckNullifiersByPrefixResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/CheckNullifiersByPrefix",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "CheckNullifiersByPrefix"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the latest state of an account with the specified ID.
        pub async fn get_account_details(
            &mut self,
            request: impl tonic::IntoRequest<super::super::account::AccountId>,
        ) -> core::result::Result<
            tonic::Response<super::super::account::AccountDetails>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/GetAccountDetails",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "GetAccountDetails"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the latest state proofs of the specified accounts.
        pub async fn get_account_proofs(
            &mut self,
            request: impl tonic::IntoRequest<super::AccountProofsRequest>,
        ) -> core::result::Result<tonic::Response<super::AccountProofs>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/GetAccountProofs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "GetAccountProofs"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns raw block data for the specified block number.
        pub async fn get_block_by_number(
            &mut self,
            request: impl tonic::IntoRequest<super::super::blockchain::BlockNumber>,
        ) -> core::result::Result<
            tonic::Response<super::super::blockchain::MaybeBlock>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/GetBlockByNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "GetBlockByNumber"));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        pub async fn get_block_header_by_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::shared::BlockHeaderByNumberRequest,
            >,
        ) -> core::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumberResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/GetBlockHeaderByNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "GetBlockHeaderByNumber"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns a list of committed notes matching the provided note IDs.
        pub async fn get_notes_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::super::note::NoteIdList>,
        ) -> core::result::Result<
            tonic::Response<super::super::note::CommittedNoteList>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/GetNotesById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "GetNotesById"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns info which can be used by the client to sync up to the tip of chain for the notes they are interested in.
        ///
        /// Client specifies the `note_tags` they are interested in, and the block height from which to search for new for
        /// matching notes for. The request will then return the next block containing any note matching the provided tags.
        ///
        /// The response includes each note's metadata and inclusion proof.
        ///
        /// A basic note sync can be implemented by repeatedly requesting the previous response's block until reaching the
        /// tip of the chain.
        pub async fn sync_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::SyncNotesRequest>,
        ) -> core::result::Result<
            tonic::Response<super::SyncNotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc_store.Rpc/SyncNotes");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc_store.Rpc", "SyncNotes"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns info which can be used by the client to sync up to the latest state of the chain
        /// for the objects (accounts, notes, nullifiers) the client is interested in.
        ///
        /// This request returns the next block containing requested data. It also returns `chain_tip`
        /// which is the latest block number in the chain. Client is expected to repeat these requests
        /// in a loop until `response.block_header.block_num == response.chain_tip`, at which point
        /// the client is fully synchronized with the chain.
        ///
        /// Each request also returns info about new notes, nullifiers etc. created. It also returns
        /// Chain MMR delta that can be used to update the state of Chain MMR. This includes both chain
        /// MMR peaks and chain MMR nodes.
        ///
        /// For preserving some degree of privacy, note tags and nullifiers filters contain only high
        /// part of hashes. Thus, returned data contains excessive notes and nullifiers, client can make
        /// additional filtering of that data on its side.
        pub async fn sync_state(
            &mut self,
            request: impl tonic::IntoRequest<super::SyncStateRequest>,
        ) -> core::result::Result<
            tonic::Response<super::SyncStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc_store.Rpc/SyncState");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc_store.Rpc", "SyncState"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns account vault updates for specified account within a block range.
        pub async fn sync_account_vault(
            &mut self,
            request: impl tonic::IntoRequest<super::SyncAccountVaultRequest>,
        ) -> core::result::Result<
            tonic::Response<super::SyncAccountVaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/SyncAccountVault",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "SyncAccountVault"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns storage map updates for specified account and storage slots within a block range.
        pub async fn sync_storage_maps(
            &mut self,
            request: impl tonic::IntoRequest<super::SyncStorageMapsRequest>,
        ) -> core::result::Result<
            tonic::Response<super::SyncStorageMapsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc_store.Rpc/SyncStorageMaps",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc_store.Rpc", "SyncStorageMaps"));
            self.inner.unary(req, path, codec).await
        }
    }
}
