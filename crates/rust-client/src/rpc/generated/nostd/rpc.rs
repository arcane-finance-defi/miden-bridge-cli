// This file is @generated by prost-build.
/// Represents the status of the node.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RpcStatus {
    /// The rpc component's running version.
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    /// The genesis commitment.
    #[prost(message, optional, tag = "2")]
    pub genesis_commitment: ::core::option::Option<super::primitives::Digest>,
    /// The store status.
    #[prost(message, optional, tag = "3")]
    pub store: ::core::option::Option<super::rpc_store::StoreStatus>,
    /// The block producer status.
    #[prost(message, optional, tag = "4")]
    pub block_producer: ::core::option::Option<
        super::block_producer::BlockProducerStatus,
    >,
}
/// Generated client implementations.
pub mod api_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// RPC API for the RPC component
    #[derive(Debug, Clone)]
    pub struct ApiClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ApiClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + core::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + core::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ApiClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + core::marker::Send + core::marker::Sync,
        {
            ApiClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns the status info of the node.
        pub async fn status(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> core::result::Result<tonic::Response<super::RpcStatus>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/Status");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "Status"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns a nullifier proof for each of the requested nullifiers.
        pub async fn check_nullifiers(
            &mut self,
            request: impl tonic::IntoRequest<super::super::rpc_store::NullifierList>,
        ) -> core::result::Result<
            tonic::Response<super::super::rpc_store::CheckNullifiersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/CheckNullifiers");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "CheckNullifiers"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns a list of nullifiers that match the specified prefixes and are recorded in the node.
        ///
        /// Note that only 16-bit prefixes are supported at this time.
        pub async fn check_nullifiers_by_prefix(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_store::CheckNullifiersByPrefixRequest,
            >,
        ) -> core::result::Result<
            tonic::Response<super::super::rpc_store::CheckNullifiersByPrefixResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc.Api/CheckNullifiersByPrefix",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc.Api", "CheckNullifiersByPrefix"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the latest state of an account with the specified ID.
        pub async fn get_account_details(
            &mut self,
            request: impl tonic::IntoRequest<super::super::account::AccountId>,
        ) -> core::result::Result<
            tonic::Response<super::super::account::AccountDetails>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc.Api/GetAccountDetails",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "GetAccountDetails"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the latest state proofs of the specified accounts.
        pub async fn get_account_proofs(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_store::AccountProofsRequest,
            >,
        ) -> core::result::Result<
            tonic::Response<super::super::rpc_store::AccountProofs>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/GetAccountProofs");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "GetAccountProofs"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns raw block data for the specified block number.
        pub async fn get_block_by_number(
            &mut self,
            request: impl tonic::IntoRequest<super::super::blockchain::BlockNumber>,
        ) -> core::result::Result<
            tonic::Response<super::super::blockchain::MaybeBlock>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/GetBlockByNumber");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "GetBlockByNumber"));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves block header by given block number. Optionally, it also returns the MMR path
        /// and current chain length to authenticate the block's inclusion.
        pub async fn get_block_header_by_number(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::shared::BlockHeaderByNumberRequest,
            >,
        ) -> core::result::Result<
            tonic::Response<super::super::shared::BlockHeaderByNumberResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc.Api/GetBlockHeaderByNumber",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc.Api", "GetBlockHeaderByNumber"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns a list of notes matching the provided note IDs.
        pub async fn get_notes_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::super::note::NoteIdList>,
        ) -> core::result::Result<
            tonic::Response<super::super::note::CommittedNoteList>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/GetNotesById");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "GetNotesById"));
            self.inner.unary(req, path, codec).await
        }
        /// Submits proven transaction to the Miden network.
        pub async fn submit_proven_transaction(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::transaction::ProvenTransaction,
            >,
        ) -> core::result::Result<
            tonic::Response<
                super::super::block_producer::SubmitProvenTransactionResponse,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc.Api/SubmitProvenTransaction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rpc.Api", "SubmitProvenTransaction"));
            self.inner.unary(req, path, codec).await
        }
        /// Submits a proven batch of transactions to the Miden network.
        ///
        /// The batch may include transactions which were are:
        ///
        ///   - already in the mempool i.e. previously successfully submitted
        ///   - will be submitted to the mempool in the future
        ///   - won't be submitted to the mempool at all
        ///
        /// All transactions in the batch but not in the mempool must build on the current mempool
        /// state following normal transaction submission rules.
        pub async fn submit_proven_batch(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::transaction::ProvenTransactionBatch,
            >,
        ) -> core::result::Result<
            tonic::Response<super::super::block_producer::SubmitProvenBatchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rpc.Api/SubmitProvenBatch",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "SubmitProvenBatch"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns account vault updates for specified account within a block range.
        pub async fn sync_account_vault(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_store::SyncAccountVaultRequest,
            >,
        ) -> core::result::Result<
            tonic::Response<super::super::rpc_store::SyncAccountVaultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/SyncAccountVault");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "SyncAccountVault"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns info which can be used by the client to sync up to the tip of chain for the notes they are interested in.
        ///
        /// Client specifies the `note_tags` they are interested in, and the block height from which to search for new for
        /// matching notes for. The request will then return the next block containing any note matching the provided tags.
        ///
        /// The response includes each note's metadata and inclusion proof.
        ///
        /// A basic note sync can be implemented by repeatedly requesting the previous response's block until reaching the
        /// tip of the chain.
        pub async fn sync_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::super::rpc_store::SyncNotesRequest>,
        ) -> core::result::Result<
            tonic::Response<super::super::rpc_store::SyncNotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/SyncNotes");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "SyncNotes"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns info which can be used by the client to sync up to the latest state of the chain
        /// for the objects (accounts and notes) the client is interested in.
        ///
        /// This request returns the next block containing requested data. It also returns `chain_tip`
        /// which is the latest block number in the chain. Client is expected to repeat these requests
        /// in a loop until `response.block_header.block_num == response.chain_tip`, at which point
        /// the client is fully synchronized with the chain.
        ///
        /// Each update response also contains info about new notes, accounts etc. created. It also returns
        /// Chain MMR delta that can be used to update the state of Chain MMR. This includes both chain
        /// MMR peaks and chain MMR nodes.
        ///
        /// For preserving some degree of privacy, note tags contain only high
        /// part of hashes. Thus, returned data contains excessive notes, client can make
        /// additional filtering of that data on its side.
        pub async fn sync_state(
            &mut self,
            request: impl tonic::IntoRequest<super::super::rpc_store::SyncStateRequest>,
        ) -> core::result::Result<
            tonic::Response<super::super::rpc_store::SyncStateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/SyncState");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "SyncState"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns storage map updates for specified account and storage slots within a block range.
        pub async fn sync_storage_maps(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::rpc_store::SyncStorageMapsRequest,
            >,
        ) -> core::result::Result<
            tonic::Response<super::super::rpc_store::SyncStorageMapsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/rpc.Api/SyncStorageMaps");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("rpc.Api", "SyncStorageMaps"));
            self.inner.unary(req, path, codec).await
        }
    }
}
