use alloc::boxed::Box;
use alloc::collections::{BTreeMap, BTreeSet};
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::error::Error;

use miden_objects::Word;
use miden_objects::account::{Account, AccountCode, AccountId};
use miden_objects::block::{AccountWitness, BlockHeader, BlockNumber, ProvenBlock};
use miden_objects::crypto::merkle::{Forest, MerklePath, MmrProof, SmtProof};
use miden_objects::note::{NoteId, NoteTag, Nullifier};
use miden_objects::transaction::ProvenTransaction;
use miden_objects::utils::Deserializable;
use miden_tx::utils::Serializable;
use miden_tx::utils::sync::RwLock;
use tonic::Status;
use tracing::info;

use super::domain::account::{AccountProof, AccountProofs, AccountUpdateSummary};
use super::domain::note::FetchedNote;
use super::domain::nullifier::NullifierUpdate;
use super::{
    Endpoint,
    FetchedAccount,
    NodeRpcClient,
    NodeRpcClientEndpoint,
    NoteSyncInfo,
    RpcError,
    StateSyncInfo,
    generated as proto,
};
use crate::rpc::errors::{AcceptHeaderError, GrpcError, RpcConversionError};
use crate::transaction::ForeignAccount;

mod api_client;
use api_client::api_client_wrapper::ApiClient;

// TONIC RPC CLIENT
// ================================================================================================

/// Client for the Node RPC API using tonic.
///
/// If the `tonic` feature is enabled, this client will use a `tonic::transport::Channel` to
/// communicate with the node. In this case the connection will be established lazily when the
/// first request is made.
/// If the `web-tonic` feature is enabled, this client will use a `tonic_web_wasm_client::Client`
/// to communicate with the node.
///
/// In both cases, the [`TonicRpcClient`] depends on the types inside the `generated` module, which
/// are generated by the build script and also depend on the target architecture.
pub struct TonicRpcClient {
    client: RwLock<Option<ApiClient>>,
    endpoint: String,
    timeout_ms: u64,
    genesis_commitment: RwLock<Option<Word>>,
}

impl TonicRpcClient {
    /// Returns a new instance of [`TonicRpcClient`] that'll do calls to the provided [`Endpoint`]
    /// with the given timeout in milliseconds.
    pub fn new(endpoint: &Endpoint, timeout_ms: u64) -> TonicRpcClient {
        TonicRpcClient {
            client: RwLock::new(None),
            endpoint: endpoint.to_string(),
            timeout_ms,
            genesis_commitment: RwLock::new(None),
        }
    }

    /// Takes care of establishing the RPC connection if not connected yet. It ensures that the
    /// `rpc_api` field is initialized and returns a write guard to it.
    async fn ensure_connected(&self) -> Result<ApiClient, RpcError> {
        if self.client.read().is_none() {
            self.connect().await?;
        }

        Ok(self.client.read().as_ref().expect("rpc_api should be initialized").clone())
    }

    /// Connects to the Miden node, setting the client API with the provided URL, timeout and
    /// genesis commitment.
    async fn connect(&self) -> Result<(), RpcError> {
        let genesis_commitment = *self.genesis_commitment.read();
        let new_client =
            ApiClient::new_client(self.endpoint.clone(), self.timeout_ms, genesis_commitment)
                .await?;
        let mut client = self.client.write();
        client.replace(new_client);

        Ok(())
    }
}

#[cfg_attr(not(target_arch = "wasm32"), async_trait::async_trait)]
#[cfg_attr(target_arch = "wasm32", async_trait::async_trait(?Send))]
impl NodeRpcClient for TonicRpcClient {
    /// Sets the genesis commitment for the client and reconnects to the node providing the
    /// genesis commitment in the request headers. If the genesis commitment is already set,
    /// this method does nothing.
    async fn set_genesis_commitment(&self, commitment: Word) -> Result<(), RpcError> {
        if self.genesis_commitment.read().is_some() {
            // Genesis commitment is already set, ignoring the new value.
            return Ok(());
        }

        *self.genesis_commitment.write() = Some(commitment);
        self.connect().await
    }

    async fn submit_proven_transaction(
        &self,
        proven_transaction: ProvenTransaction,
    ) -> Result<BlockNumber, RpcError> {
        let request = proto::transaction::ProvenTransaction {
            transaction: proven_transaction.to_bytes(),
        };

        let mut rpc_api = self.ensure_connected().await?;

        let api_response = rpc_api.submit_proven_transaction(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::SubmitProvenTx, status)
        })?;

        Ok(BlockNumber::from(api_response.into_inner().block_height))
    }

    async fn get_block_header_by_number(
        &self,
        block_num: Option<BlockNumber>,
        include_mmr_proof: bool,
    ) -> Result<(BlockHeader, Option<MmrProof>), RpcError> {
        let request = proto::shared::BlockHeaderByNumberRequest {
            block_num: block_num.as_ref().map(BlockNumber::as_u32),
            include_mmr_proof: Some(include_mmr_proof),
        };

        info!("Calling GetBlockHeaderByNumber: {:?}", request);

        let mut rpc_api = self.ensure_connected().await?;

        let api_response = rpc_api.get_block_header_by_number(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::GetBlockHeaderByNumber, status)
        })?;

        let response = api_response.into_inner();

        let block_header: BlockHeader = response
            .block_header
            .ok_or(RpcError::ExpectedDataMissing("BlockHeader".into()))?
            .try_into()?;

        let mmr_proof = if include_mmr_proof {
            let forest = response
                .chain_length
                .ok_or(RpcError::ExpectedDataMissing("ChainLength".into()))?;
            let merkle_path: MerklePath = response
                .mmr_path
                .ok_or(RpcError::ExpectedDataMissing("MmrPath".into()))?
                .try_into()?;

            Some(MmrProof {
                forest: Forest::new(usize::try_from(forest).expect("u64 should fit in usize")),
                position: block_header.block_num().as_usize(),
                merkle_path,
            })
        } else {
            None
        };

        Ok((block_header, mmr_proof))
    }

    async fn get_notes_by_id(&self, note_ids: &[NoteId]) -> Result<Vec<FetchedNote>, RpcError> {
        let request = proto::note::NoteIdList {
            ids: note_ids.iter().map(|id| (*id).into()).collect(),
        };

        let mut rpc_api = self.ensure_connected().await?;

        let api_response = rpc_api.get_notes_by_id(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::GetNotesById, status)
        })?;

        let response_notes = api_response
            .into_inner()
            .notes
            .into_iter()
            .map(FetchedNote::try_from)
            .collect::<Result<Vec<FetchedNote>, RpcConversionError>>()?;

        Ok(response_notes)
    }

    /// Sends a sync state request to the Miden node, validates and converts the response
    /// into a [`StateSyncInfo`] struct.
    async fn sync_state(
        &self,
        block_num: BlockNumber,
        account_ids: &[AccountId],
        note_tags: &BTreeSet<NoteTag>,
    ) -> Result<StateSyncInfo, RpcError> {
        let account_ids = account_ids.iter().map(|acc| (*acc).into()).collect();

        let note_tags = note_tags.iter().map(|&note_tag| note_tag.into()).collect();

        let request = proto::rpc_store::SyncStateRequest {
            block_num: block_num.as_u32(),
            account_ids,
            note_tags,
        };

        let mut rpc_api = self.ensure_connected().await?;

        let response = rpc_api.sync_state(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::SyncState, status)
        })?;
        response.into_inner().try_into()
    }

    /// Sends a `GetAccountDetailsRequest` to the Miden node, and extracts an [`FetchedAccount`]
    /// from the `GetAccountDetailsResponse` response.
    ///
    /// # Errors
    ///
    /// This function will return an error if:
    ///
    /// - There was an error sending the request to the node.
    /// - The answer had a `None` for one of the expected fields (`account`, `summary`,
    ///   `account_commitment`, `details`).
    /// - There is an error during [Account] deserialization.
    async fn get_account_details(&self, account_id: AccountId) -> Result<FetchedAccount, RpcError> {
        let request = proto::account::AccountId { id: account_id.to_bytes() };

        let mut rpc_api = self.ensure_connected().await?;

        let response = rpc_api.get_account_details(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::GetAccountDetails, status)
        })?;
        let response = response.into_inner();
        let account_summary = response.summary.ok_or(RpcError::ExpectedDataMissing(
            "GetAccountDetails response should have an `summary`".to_string(),
        ))?;

        let commitment =
            account_summary.account_commitment.ok_or(RpcError::ExpectedDataMissing(
                "GetAccountDetails response's account should have an `account_commitment`"
                    .to_string(),
            ))?;

        let commitment = commitment.try_into()?;

        let update_summary = AccountUpdateSummary::new(commitment, account_summary.block_num);
        if account_id.is_private() {
            Ok(FetchedAccount::Private(account_id, update_summary))
        } else {
            let account = Account::read_from_bytes(&response.details.ok_or(
                RpcError::ExpectedDataMissing(
                    "GetAccountDetails response should have an `account`".to_string(),
                ),
            )?)?;

            Ok(FetchedAccount::Public(account, update_summary))
        }
    }

    /// Sends a `GetAccountProofs` request to the Miden node, and extracts a list of [AccountProof]
    /// from the response, as well as the block number that they were retrieved for.
    ///
    /// # Errors
    ///
    /// This function will return an error if:
    ///
    /// - One of the requested Accounts isn't returned by the node.
    /// - There was an error sending the request to the node.
    /// - The answer had a `None` for one of the expected fields.
    /// - There is an error during storage deserialization.
    async fn get_account_proofs(
        &self,
        account_requests: &BTreeSet<ForeignAccount>,
        known_account_codes: Vec<AccountCode>,
    ) -> Result<AccountProofs, RpcError> {
        let requested_accounts = account_requests.len();
        let mut rpc_account_requests: Vec<
            proto::rpc_store::account_proofs_request::AccountRequest,
        > = Vec::with_capacity(account_requests.len());

        for foreign_account in account_requests {
            rpc_account_requests.push(proto::rpc_store::account_proofs_request::AccountRequest {
                account_id: Some(foreign_account.account_id().into()),
                storage_requests: foreign_account.storage_slot_requirements().into(),
            });
        }

        let known_account_codes: BTreeMap<Word, AccountCode> =
            known_account_codes.into_iter().map(|c| (c.commitment(), c)).collect();

        let request = proto::rpc_store::AccountProofsRequest {
            account_requests: rpc_account_requests,
            include_headers: Some(true),
            code_commitments: known_account_codes.keys().map(Into::into).collect(),
        };

        let mut rpc_api = self.ensure_connected().await?;

        let response = rpc_api
            .get_account_proofs(request)
            .await
            .map_err(|status| {
                RpcError::from_grpc_error(NodeRpcClientEndpoint::GetAccountProofs, status)
            })?
            .into_inner();

        let mut account_proofs = Vec::with_capacity(response.account_proofs.len());
        let block_num = response.block_num.into();

        // sanity check response
        if requested_accounts != response.account_proofs.len() {
            return Err(RpcError::ExpectedDataMissing(
                "AccountProof did not contain all account IDs".to_string(),
            ));
        }

        for account in response.account_proofs {
            let account_witness: AccountWitness = account
                .witness
                .ok_or(RpcError::ExpectedDataMissing("AccountWitness".to_string()))?
                .try_into()?;

            // Because we set `include_headers` to true, for any public account we requested we
            // should have the corresponding `state_header` field
            let headers = if account_witness.id().is_public() {
                Some(
                    account
                        .state_header
                        .ok_or(RpcError::ExpectedDataMissing("Account.StateHeader".to_string()))?
                        .into_domain(account_witness.id(), &known_account_codes)?,
                )
            } else {
                None
            };

            let proof = AccountProof::new(account_witness, headers)
                .map_err(|err| RpcError::InvalidResponse(err.to_string()))?;
            account_proofs.push(proof);
        }

        Ok((block_num, account_proofs))
    }

    /// Sends a `SyncNoteRequest` to the Miden node, and extracts a [`NoteSyncInfo`] from the
    /// response.
    async fn sync_notes(
        &self,
        block_num: BlockNumber,
        note_tags: &BTreeSet<NoteTag>,
    ) -> Result<NoteSyncInfo, RpcError> {
        let note_tags = note_tags.iter().map(|&note_tag| note_tag.into()).collect();

        let request =
            proto::rpc_store::SyncNotesRequest { block_num: block_num.as_u32(), note_tags };

        let mut rpc_api = self.ensure_connected().await?;

        let response = rpc_api.sync_notes(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::SyncNotes, status)
        })?;

        response.into_inner().try_into()
    }

    async fn check_nullifiers_by_prefix(
        &self,
        prefixes: &[u16],
        block_num: BlockNumber,
    ) -> Result<Vec<NullifierUpdate>, RpcError> {
        let request = proto::rpc_store::CheckNullifiersByPrefixRequest {
            nullifiers: prefixes.iter().map(|&x| u32::from(x)).collect(),
            prefix_len: 16,
            block_num: block_num.as_u32(),
        };

        let mut rpc_api = self.ensure_connected().await?;

        let response = rpc_api.check_nullifiers_by_prefix(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::CheckNullifiersByPrefix, status)
        })?;
        let response = response.into_inner();
        let nullifiers = response
            .nullifiers
            .iter()
            .map(TryFrom::try_from)
            .collect::<Result<Vec<NullifierUpdate>, _>>()
            .map_err(|err| RpcError::InvalidResponse(err.to_string()))?;

        Ok(nullifiers)
    }

    async fn check_nullifiers(&self, nullifiers: &[Nullifier]) -> Result<Vec<SmtProof>, RpcError> {
        let request = proto::rpc_store::NullifierList {
            nullifiers: nullifiers.iter().map(|nul| nul.as_word().into()).collect(),
        };

        let mut rpc_api = self.ensure_connected().await?;

        let response = rpc_api.check_nullifiers(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::CheckNullifiers, status)
        })?;

        let response = response.into_inner();
        let proofs = response.proofs.iter().map(TryInto::try_into).collect::<Result<_, _>>()?;

        Ok(proofs)
    }

    async fn get_block_by_number(&self, block_num: BlockNumber) -> Result<ProvenBlock, RpcError> {
        let request = proto::blockchain::BlockNumber { block_num: block_num.as_u32() };

        let mut rpc_api = self.ensure_connected().await?;

        let response = rpc_api.get_block_by_number(request).await.map_err(|status| {
            RpcError::from_grpc_error(NodeRpcClientEndpoint::GetBlockByNumber, status)
        })?;

        let response = response.into_inner();
        let block =
            ProvenBlock::read_from_bytes(&response.block.ok_or(RpcError::ExpectedDataMissing(
                "GetBlockByNumberResponse.block".to_string(),
            ))?)?;

        Ok(block)
    }
}

// ERRORS
// ================================================================================================

impl RpcError {
    pub fn from_grpc_error(endpoint: NodeRpcClientEndpoint, status: Status) -> Self {
        if let Some(accept_error) = AcceptHeaderError::try_from_message(status.message()) {
            return Self::AcceptHeaderError(accept_error);
        }

        let error_kind = GrpcError::from(&status);
        let source = Box::new(status) as Box<dyn Error + Send + Sync + 'static>;

        Self::GrpcError {
            endpoint,
            error_kind,
            source: Some(source),
        }
    }
}

impl From<&Status> for GrpcError {
    fn from(status: &Status) -> Self {
        GrpcError::from_code(status.code() as i32, Some(status.message().to_string()))
    }
}

#[cfg(test)]
mod tests {
    use std::boxed::Box;

    use super::TonicRpcClient;
    use crate::rpc::{Endpoint, NodeRpcClient};

    fn assert_send_sync<T: Send + Sync>() {}

    #[test]
    fn is_send_sync() {
        assert_send_sync::<TonicRpcClient>();
        assert_send_sync::<Box<dyn NodeRpcClient>>();
    }

    // Function that returns a `Send` future from a dynamic trait that must be `Sync`.
    async fn dyn_trait_send_fut(client: Box<dyn NodeRpcClient>) {
        // This won't compile if `get_block_header_by_number` doesn't return a `Send+Sync` future.
        let res = client.get_block_header_by_number(None, false).await;
        assert!(res.is_ok());
    }

    #[tokio::test]
    async fn future_is_send() {
        let endpoint = &Endpoint::devnet();
        let client = TonicRpcClient::new(endpoint, 10000);
        let client: Box<TonicRpcClient> = client.into();
        tokio::task::spawn(async move { dyn_trait_send_fut(client).await });
    }
}
