name: Test
on:
  push:
    branches: [main, next]
  pull_request:
    types: [opened, reopened, synchronize]

# Only latest commit (per PR) should run 
concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  test:
    name: Test Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Install Rust
        run: rustup update --no-self-update
      - name: Add Rust Cache
        uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@nextest
      - name: make - test
        run: make test

  doc-tests:
    name: doc-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/next' }}
      - name: Install rust
        run: rustup update --no-self-update
      - name: Run doc-tests
        run: make test-docs

  integration-tests:
    name: Run integration tests on ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Install Rust
        run: rustup update --no-self-update
      - uses: taiki-e/install-action@nextest
      - name: Add Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Start test node
        run: make start-node-background
      - name: Run integration tests
        run: make integration-test-full
      - name: Stop test node
        if: always()
        run: |
          make stop-node

  build-web-client-dist-folder:
    name: Build Web Client
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: Install Rust (needed for WASM build)
        run: |
          rustup update --no-self-update
          rustup target add wasm32-unknown-unknown

      - name: Add Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          cd ./crates/web-client
          yarn install

      - name: Restore cache - dist folder
        id: dist-cache
        uses: actions/cache/restore@v4
        with:
          path: ./crates/web-client/dist
          key: ${{ runner.os }}-dist-${{ hashFiles('**/yarn.lock', './crates/web-client/src/**/*.ts', './crates/web-client/pkg/**/*.wasm') }}
          restore-keys: ${{ runner.os }}-dist-

      - name: Build project
        if: steps.dist-cache.outputs.cache-hit != 'true'
        run: |
          cd ./crates/web-client
          MIDEN_WEB_DEV=true yarn run build

      - name: Save cache - dist folder
        if: steps.dist-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ./crates/web-client/dist
          key: ${{ steps.dist-cache.outputs.cache-key }}

      - name: Upload artifacts for matrix jobs
        uses: actions/upload-artifact@v4
        with:
          name: web-client-artifacts
          path: ./crates/web-client/dist

  integration-tests-web-client:
    name: Run integration tests for web client on ubuntu-latest
    runs-on: ubuntu-latest
    needs: [ build-web-client-dist-folder ]
    strategy:
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@main
      - name: Install Rust
        run: |
          rustup update --no-self-update
          rustup target add wasm32-unknown-unknown

      - name: Fetch dist folder
        uses: actions/download-artifact@v4
        with:
          name: web-client-artifacts
          path: ./crates/web-client

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Configure setuid sandbox
        run: . ./scripts/configure-sandbox.sh
      - name: Add Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Start test node
        run: make start-node-background
      - name: Run web client tests
        run: |
          cd ./crates/web-client
          yarn install
          yarn playwright install --with-deps
          MIDEN_WEB_DEV=true yarn run build
          yarn playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      - name: Stop test node
        if: always()
        run: make stop-node

  integration-tests-remote-prover-web-client:
    name: Run integration tests for remote prover on ubuntu-latest
    runs-on: ubuntu-latest
    needs: [ build-web-client-dist-folder ]
    steps:
      - uses: actions/checkout@main
      - name: Install Rust
        run: |
          rustup update --no-self-update
          rustup target add wasm32-unknown-unknown
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Fetch dist folder
        uses: actions/download-artifact@v4
        with:
          name: web-client-artifacts
          path: ./crates/web-client

      - name: Configure setuid sandbox
        run: . ./scripts/configure-sandbox.sh
      - name: Add Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Start test node
        run: make start-node-background
      - name: Start prover
        run: make start-prover-background
      - name: Run remote prover tests
        run: make integration-test-remote-prover-web-client
      - name: Stop test node
        if: always()
        run: make stop-node
      - name: Stop miden-prover
        if: always()
        run: make stop-prover
